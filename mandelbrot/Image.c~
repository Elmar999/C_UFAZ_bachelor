/*====================================================*\
  Vendredi 8 novembre 2013
  Arash HABIBI
  Image.c
\*====================================================*/

#include "Image.h"

//------------------------------------------------------------------------

Color C_new(unsigned char red, unsigned char green, unsigned char blue)
{
	Color c;
	c._red = red;
	c._green = green;
	c._blue = blue;
	return c;
}

//------------------------------------------------------------------------

void C_check(Color c, char *message)
{
	fprintf(stderr,"%s : %d %d %d\n",message,c._red,c._green,c._blue);
}

//------------------------------------------------------------------------

Color C_blend(Color c1, Color c2, double blend_coef)
{
	Color c;
	c._red = (1-blend_coef)*c1._red + blend_coef*c2._red;
	c._green = (1-blend_coef)*c1._green + blend_coef*c2._green;
	c._blue = (1-blend_coef)*c1._blue + blend_coef*c2._blue;
	return c;
}

//------------------------------------------------------------------------

double C_intensity(Color c)
{
	double intensity;

	if(c._red > c._green)
	{
		if(c._blue > c._red)	intensity = c._blue;
		else		   			intensity = c._red;
	}
	else
	{
		if(c._blue > c._green)	intensity = c._blue;
		else		   			intensity = c._green;
	}
	return intensity;
}

//------------------------------------------------------------------------
//------------------------------------------------------------------------
//------------------------------------------------------------------------

Image* I_new(int width, int height)
{
	Image *img_new = (Image*)malloc(sizeof(Image));
	img_new->_width = width;
	img_new->_height = height;
	img_new->_xzoom = 0;
	img_new->_yzoom = 0;
	img_new->_zoom = 1.0;

	img_new->_xoffset=0;
	img_new->_yoffset=0;

	img_new->_current_color = C_new(255,255,255);

	img_new->_min = INFINITY;
	img_new->_max = -INFINITY;

	img_new->_buffer = (Color**)calloc(width,sizeof(Color*));

	int x;
	for(x=0;x<width;x++)
		img_new->_buffer[x] = (Color*)calloc(height,sizeof(Color));

	return img_new;
}

//------------------------------------------------------------------------

static void _windowToImage(Image *img, int xwin, int ywin, int *ximg, int *yimg)
{
	*ximg = img->_xzoom + img->_xoffset + (xwin-img->_xzoom) / img->_zoom;
	*yimg = img->_yzoom + img->_yoffset + (ywin-img->_yzoom) / img->_zoom;
}

//-----

void I_check(Image *img, char *message)
{
	fprintf(stderr,"------------- Check Image %s ------------------\n",message);
	fprintf(stderr,"%d x %d pixels.\n",img->_width,img->_height);
	fprintf(stderr,"Centre de zoom : (%d,%d)\n",img->_xzoom,img->_yzoom);
	fprintf(stderr,"Facteur de zoom : %f\n",img->_zoom);
	fprintf(stderr,"Décalage : (%d,%d),\n",img->_xoffset,img->_yoffset);

	fprintf(stderr,"Les quatre coins de la fenêtre : \n");
	int ximg, yimg;
	_windowToImage(img,0,0,&ximg,&yimg);
	fprintf(stderr,"0,0 -> ximg=%d yimg=%d\n",ximg,yimg);

	_windowToImage(img,img->_width-1,0,&ximg,&yimg);
	fprintf(stderr,"%d,0 -> ximg=%d yimg=%d\n",img->_width-1,ximg,yimg);

	_windowToImage(img,0,img->_height-1,&ximg,&yimg);
	fprintf(stderr,"0,%d -> ximg=%d yimg=%d\n",img->_height-1,ximg,yimg);

	_windowToImage(img,img->_width-1,img->_height-1,&ximg,&yimg);
	fprintf(stderr,"%d,%d -> ximg=%d yimg=%d\n",img->_width-1,img->_height-1,ximg,yimg);
}

//------------------------------------------------------------------------

static void _plot(Image *img, int x, int y, Color c)
{
	img->_buffer[x][y] = c;
}

//-----

Image* I_read(char *ppmfilename)
{
	Image *img;
	Ppm ppm = PPM_nouv(ppmfilename, PPM_LECTURE);

	fprintf(stderr,"%d x %d\n",PPM_largeur(ppm),PPM_hauteur(ppm));

	if(ppm!=NULL)
	{
		img = I_new(PPM_largeur(ppm),PPM_hauteur(ppm));
		img->_min = INFINITY;
		img->_max = -INFINITY;

		int nb_bytes=ppm->_nb_bytes;
		int valmax = ppm->_valmax;

		int nb_pixels = img->_width*img->_height;

		if(nb_bytes<=1)
		{
			unsigned char *donnees = (unsigned char*)calloc(3*nb_pixels,sizeof(unsigned char));
			PPM_lectureDonneesChar(ppm, donnees);

			int x,y;
			for(y=0;y<img->_height;y++)
				for(x=0;x<img->_width;x++)
				{
					int indice = y*img->_width + x;
					Color c = C_new(donnees[3*indice  ],
									donnees[3*indice+1],
									donnees[3*indice+2]);
					double intens = C_intensity(c);
					if((intens<img->_min)&&(intens>0))
						img->_min = intens;
					if(intens>img->_max)
						img->_max = intens;

					_plot(img,x,y,c);
				}
		}
		else
		{
			unsigned short *donnees = (unsigned short*)calloc(3*nb_pixels,sizeof(unsigned short));
			PPM_lectureDonneesShort(ppm, donnees);
			int x,y;
			for(y=0;y<img->_height;y++)
				for(x=0;x<img->_width;x++)
				{
					int indice = y*img->_width + x;
					Color c = C_new((1.0*donnees[3*indice  ])/valmax,
									(1.0*donnees[3*indice+1])/valmax,
									(1.0*donnees[3*indice+2])/valmax);
					img->_buffer[x][y] = c;
				}
		}
		PPM_fermeture(ppm);
		return(img);
	}
	else
		return(NULL);
}

//------------------------------------------------------------------------

void I_fill(Image *img, Color c)
{
	int x,y;
	for(x=0;x<img->_width;x++)
		for(y=0;y<img->_height;y++)
			img->_buffer[x][y]=c;
	img->_min = C_intensity(c);
	img->_max = C_intensity(c);
}

//------------------------------------------------------------------------

void I_checker(Image *img, Color c1, Color c2, int step)
{
	int x,y;
	for(x=0;x<img->_width;x++)
		for(y=0;y<img->_height;y++)
		{
			int n_x = x/step;
			int n_y = y/step;
			if((n_x+n_y)%2==0)	_plot(img,x,y,c1);
			else				_plot(img,x,y,c2);
		}
	if(C_intensity(c1)<C_intensity(c2))
	{
		img->_min = C_intensity(c1);
		img->_max = C_intensity(c2);
	}
	else
	{
		img->_min = C_intensity(c2);
		img->_max = C_intensity(c1);
	}
}

//------------------------------------------------------------------------

void I_changeColor(Image *img, Color c)
{
	img->_current_color = c;
}

//------------------------------------------------------------------------

void I_plot(Image *img, int x, int y)
{
	if((x>=0)&&(x<img->_width)&&
	   (y>=0)&&(y<img->_height))
	{
		img->_buffer[x][y] = img->_current_color;

		double intens = C_intensity(img->_current_color);
		if((intens < img->_min)&&(intens>0))
			img->_min = intens;
		if(intens > img->_max)
			img->_max = intens;
	}
	else
	{
		fprintf(stderr,"I_plot : ERROR !!!\n");
		fprintf(stderr,"x (=%d) must be in the [%d,%d] range and\n", x, 0, img->_width);
		fprintf(stderr,"y (=%d) must be in the [%d,%d] range\n", y, 0, img->_height);
	}
}

//------------------------------------------------------------------------

void I_plotColor(Image *img, int x, int y, Color c)
{
	if((x>=0)&&(x<img->_width)&&
	   (y>=0)&&(y<img->_height))
	{
		img->_buffer[x][y] = c;

		double intens = C_intensity(c);
		if(( intens < img->_min)&&(intens >0))
			img->_min = intens;
		if(intens > img->_max)
			img->_max = intens;
	}
	else
	{
		fprintf(stderr,"I_plotColor : ERROR !!!\n");
		fprintf(stderr,"x (=%d) must be in the [%d,%d] range and\n", x, 0, img->_width);
		fprintf(stderr,"y (=%d) must be in the [%d,%d] range\n", y, 0, img->_height);
	}
}

//------------------------------------------------------------------------
// Changement de repère

void I_focusPoint(Image *img, int xwin, int ywin)
{
	int dx = xwin - img->_xzoom;
	int dy = ywin - img->_yzoom;
	img->_xoffset += dx*(1.0/img->_zoom-1);
	img->_yoffset += dy*(1.0/img->_zoom-1);
	img->_xzoom = xwin;
	img->_yzoom = ywin;
}

//------------------------------------------------------------------------

void I_zoomInit(Image *img)
{
	img->_xoffset = 0;
	img->_yoffset = 0;
	img->_zoom = 1.0;
}

//------------------------------------------------------------------------

void I_zoom(Image *img, double zoom_coef)
{
	img->_zoom = img->_zoom * zoom_coef;
}

//------------------------------------------------------------------------

void I_move(Image *img, int x, int y)
{
	img->_xoffset += x;
	img->_yoffset += y;
}

//------------------------------------------------------------------------

void I_mandelbrot(Image *img, Mandelbrot *mb)
{
	int xwin, ywin;
	for(xwin=0;xwin<img->_width;xwin++)
		for(ywin=0;ywin<img->_height;ywin++)
		{
			int value = MB_compute(mb, xwin, ywin);
			Color c;
			if(value>=255) c = C_new(0,0,0);
			else c = C_new(value,value,value);

			double intens = C_intensity(c);
			if((intens < img->_min)&&(intens>0))
				img->_min = intens;
			if(intens > img->_max)
				img->_max = intens;

			_plot(img,xwin,ywin,c);
		}
	img->_xoffset = 0;
	img->_yoffset = 0;
	img->_xzoom = 0;
	img->_yzoom = 0;
	img->_zoom = 1;
	I_check(img,"A la fin de I_mandelbrot");
}

//------------------------------------------------------------------------

void I_colorize(Image *img, Color c_min, Color c_max)
{
	int xwin, ywin;
	for(xwin=0;xwin<img->_width;xwin++)
		for(ywin=0;ywin<img->_height;ywin++)
		{
			Color c = img->_buffer[xwin][ywin];
			double value = C_intensity(c);
			if(value!=0)
				_plot(img,xwin,ywin,C_blend(c_min,c_max,pow(value/255,0.5)));
		}
}

//------------------------------------------------------------------------

void I_draw(Image *img)
{
	glBegin(GL_POINTS);
	int xwin, ywin, ximg, yimg;
	for(xwin=0;xwin<img->_width;xwin++)
		for(ywin=0;ywin<img->_height;ywin++)
		{
			_windowToImage(img, xwin, ywin, &ximg, &yimg);
			Color c;
			if((ximg>=0)&&(ximg<img->_width)&&
			   (yimg>=0)&&(yimg<img->_height))
				c = img->_buffer[ximg][yimg];
			else
				c = C_new(0,0,0);

			glColor3ub(c._red,c._green,c._blue);
			glVertex2i(xwin,ywin);
		}
	glEnd();
}

//------------------------------------------------------------------------





